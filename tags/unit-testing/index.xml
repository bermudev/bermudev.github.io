<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unit testing on ~/bermudev/blog</title>
    <link>https://bermu.dev/tags/unit-testing/</link>
    <description>Recent content in unit testing on ~/bermudev/blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Carlos Berm√∫dez</copyright>
    <lastBuildDate>Sat, 17 Jun 2023 23:18:57 +0200</lastBuildDate><atom:link href="https://bermu.dev/tags/unit-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A quick overview of Test Driven Development</title>
      <link>https://bermu.dev/posts/a_quick_overview_of_test_driven_development/</link>
      <pubDate>Sat, 17 Jun 2023 23:18:57 +0200</pubDate>
      
      <guid>https://bermu.dev/posts/a_quick_overview_of_test_driven_development/</guid>
      <description>Test-Driven Development (TDD) is a software development practice where developers write tests before writing the implementation code. Yes, I know it sounds a little crazy, but keep reading!
What is TDD all about? The TDD cycle is really simple and it usually consists of three main steps:
Write a failing test: First, you write a test that specifies the desired behavior of the code you are about to write. This test is expected to fail initially, as the code to fulfill this behavior has not been implemented yet.</description>
    </item>
    
  </channel>
</rss>
