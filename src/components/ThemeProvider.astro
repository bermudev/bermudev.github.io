{/* Inlined to avoid FOUC. */}
<script is:inline>
	function getUserPref() {
		const storedTheme = typeof localStorage !== "undefined" && localStorage.getItem("theme");
		return (
			storedTheme || (window.matchMedia("(prefers-color-scheme: light)").matches ? "light" : "dark")
		);
	}

	function setTheme(newTheme) {
		if (!newTheme || (newTheme !== "light" && newTheme !== "dark")) {
			return console.warn(
				`Incorrect theme value received. Expected 'light' or 'dark', received ${newTheme}`,
			);
		}

		const root = document.documentElement;

		// class already set to newTheme, exit early
		if (
			(newTheme === "dark" && root.classList.contains("dark")) ||
			(newTheme === "light" && !root.classList.contains("dark"))
		) {
			return;
		}

		const colorThemeMetaTag = document.querySelector("meta[name='theme-color']");
		document.documentElement.classList.toggle("dark", newTheme === "dark");
		const bgColour = getComputedStyle(document.body).getPropertyValue("--theme-bg");

		colorThemeMetaTag.setAttribute("content", `hsl(${bgColour})`);
		if (typeof localStorage !== "undefined") {
			localStorage.setItem("theme", newTheme);
		}

		// Update images styles when theme changes
		updateImageStyles(newTheme);
	}

	function updateImageStyles(theme) {
		const images = document.querySelectorAll('[data-theme-image]');
		images.forEach(image => {
			if (theme === "dark") {
				image.style.filter = "invert(100%)";
			} else {
				image.style.filter = "none";
			}
		});
	}

	// initial setup
	setTheme(getUserPref());

	// View Transitions hook to restore theme
	document.addEventListener("astro:after-swap", () => setTheme(getUserPref()));

	// listen for theme-change custom event, fired in src/components/ThemeToggle.astro
	document.addEventListener("theme-change", (e) => {
		setTheme(e.detail.theme);
	});
</script>
